# dashboard/app.py (Version finale avec graphiques SHAP)
import streamlit as st
import requests
import pandas as pd
import json
import shap
import matplotlib.pyplot as plt

# Configuration de la page
st.set_page_config(
    page_title="Dashboard de Scoring Client",
    page_icon="ü§ñ",
    layout="wide"  # On passe en layout large pour mieux voir les graphiques
)

# URLs de l'API
API_URL_PREDICT = "https://scoring-api-thomas.onrender.com/predict"
API_URL_SHAP = "https://scoring-api-thomas.onrender.com/shap_explanation"


# --- Fonctions Utilitaires ---
def get_shap_plot(client_id):
    """
    Appelle l'API pour r√©cup√©rer les donn√©es SHAP et g√©n√®re le graphique.
    """
    try:
        # Appel √† l'endpoint SHAP
        response = requests.get(f"{API_URL_SHAP}/{client_id}", timeout=30)
        response.raise_for_status()
        shap_data = response.json()

        # Recr√©er l'objet Explanation de SHAP
        shap_explanation = shap.Explanation(
            values=shap_data["shap_values"],
            base_values=shap_data["base_value"],
            data=shap_data["feature_values"],
            feature_names=shap_data["feature_names"]
        )

        # Cr√©er le graphique force_plot
        st.subheader("üîé Analyse de la D√©cision (Interpr√©tabilit√©)")
        st.markdown(
            """
            Le graphique ci-dessous montre les facteurs qui ont le plus influenc√© la d√©cision.
            - Les **facteurs en rouge** (valeurs positives) augmentent le risque de d√©faut (poussent vers "Refus√©").
            - Les **facteurs en bleu** (valeurs n√©gatives) diminuent le risque (poussent vers "Accept√©").
            """
        )

        # Afficher le graphique dans Streamlit
        fig, ax = plt.subplots()
        shap.force_plot(
            shap_explanation.base_values,
            shap_explanation.values,
            features=shap_explanation.data,
            feature_names=shap_explanation.feature_names,
            matplotlib=True,
            show=False  # Important pour l'int√©gration dans Streamlit
        )
        st.pyplot(fig, bbox_inches='tight')
        plt.close(fig)  # Fermer la figure pour lib√©rer la m√©moire

    except requests.exceptions.RequestException as e:
        st.warning(f"Impossible de g√©n√©rer l'explication SHAP : {e}")


# --- Interface du Dashboard ---
st.title("üë®‚Äçüíª Dashboard de Scoring Client")
st.markdown(
    """
    Ce dashboard permet d'interroger notre API de scoring pour pr√©dire la probabilit√© 
    de d√©faut de paiement d'un client et de comprendre la d√©cision du mod√®le.
    """
)
st.divider()

st.header("Informations du client et de la demande de pr√™t")
col1, col2 = st.columns(2)
with col1:
    client_id = st.text_input(label="**Identifiant du client**", placeholder="Ex: 100002")
    # ... (les autres number_input ne changent pas)
    amt_income = st.number_input(label="**Revenu total (‚Ç¨)**", min_value=0, value=202500, step=1000)
    amt_credit = st.number_input(label="**Montant du cr√©dit (‚Ç¨)**", min_value=0, value=406597, step=1000)
with col2:
    amt_annuity = st.number_input(label="**Montant de l'annuit√© (‚Ç¨)**", min_value=0, value=24700, step=500)
    days_birth = st.number_input(label="**√Çge (en jours)**", max_value=0, value=-9461, step=1)
    days_employed = st.number_input(label="**Anciennet√© emploi (en jours)**", max_value=0, value=-637, step=1)

if st.button("Obtenir la pr√©diction", type="primary"):
    if client_id:
        payload = {"SK_ID_CURR": int(client_id), "AMT_CREDIT": amt_credit, "AMT_INCOME_TOTAL": amt_income,
                   "AMT_ANNUITY": amt_annuity, "DAYS_BIRTH": days_birth, "DAYS_EMPLOYED": days_employed}
        with st.spinner('Appel √† l\'API en cours...'):
            try:
                response = requests.post(API_URL_PREDICT, json=payload, timeout=30)
                response.raise_for_status()
                result = response.json()
                score = result.get("score")
                prediction = result.get("prediction")

                st.divider()
                st.header("R√©sultat de la pr√©diction")
                if prediction == 0:
                    st.success("‚úÖ **Pr√™t Accept√©**")
                else:
                    st.error("‚ùå **Pr√™t Refus√©**")

                st.metric(label="**Score de risque**", value=f"{score:.2%}")
                st.progress(score, text=f"Probabilit√© de d√©faut : {score:.2%}")

                # --- Appel √† la fonction pour afficher le graphique SHAP ---
                get_shap_plot(int(client_id))

            except requests.exceptions.HTTPError as err:
                st.error(f"Erreur HTTP : {err.response.status_code}")
                st.json(err.response.json())
            except requests.exceptions.RequestException as e:
                st.error(f"Erreur de connexion √† l'API : {e}")
    else:
        st.error("‚ö†Ô∏è Veuillez saisir un identifiant de client.")